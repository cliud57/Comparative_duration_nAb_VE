binom.test(20,30)
400*600*600*1000
options(999999999999999999)
40*60*60*100
40*40*60*100
40*50*50*100
###general settings-----
library(dplyr)
library(brms)
library(rstan)
library(emmeans)
library(ggpubr)
library(ggplot2)
library(ggforce)
library(purrr)
library(broom)
library(cowplot)
###FOR MY OWN###
setwd("C:/Users/cliud57/SPH Dropbox/CHANG LIU/Waning_review/nAb_VE/submission/202407_nature_series/codes&data")
theme_set(
theme_bw() +
theme(axis.text.x = element_text(size = 36,
colour = "black"),
axis.text.y = element_text(size = 36,
colour = "black"),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour = "black", linewidth = 1),
axis.line = element_line(colour = "black", linewidth = 0),
panel.spacing = unit(3.5, "cm"),
plot.margin = unit(c(0.8,0.8,0.8,0.8), "cm"),
strip.background = element_blank(),
axis.title.x = element_text(size = 36, face = 'bold',colour = "black"),
axis.title.y = element_text(size = 36, face = 'bold',colour = "black"),
plot.title = element_text(size = 40, face = 'bold',colour = "black"),
legend.text = element_text(size = 36, colour = "black"),
legend.title = element_text(size = 36, colour = "black"),
plot.title.position = 'plot',
legend.position = "top")
)
my_palette <- c("#00468BFF","#ED0000FF","#42B540FF",
"#0099B4FF","#925E9FFF", "#FDAF91FF",
"#AD002AFF", "#ADB6B6FF","#1B1919FF")
set.seed(225)
random_time <- sample(14:180,100, replace=FALSE) %>%
sort
set.seed(225)
random_time2 <- sample(7:140,100, replace=FALSE) %>%
sort
type=c("nab", "VE")
suffix <- c("_pre_nab", "_post_nab",
"pre_VE_mild", "pre_VE_severe", "post_VE_mild", "post_VE_severe",
"pre_nab_mRNA", "pre_nab_viral_vector",
"pre_VE_mild_mRNA", "pre_VE_mild_viral_vector", "pre_VE_severe_mRNA", "pre_VE_severe_viral_vector")
###functions-----
GMT_calculation <- function(time, beta, beta_ll, beta_ul, intercept, intercept_ll, intercept_ul){
GMT=exp(beta*time+intercept)
GMT_ll=exp(beta_ll*time+intercept_ll)
GMT_ul=exp(beta_ul*time+intercept_ul)
return(c(GMT, GMT_ll, GMT_ul))
}
logGMT_reduction <- function(starting_time, time, beta, beta_ll, beta_ul, intercept, intercept_ll, intercept_ul){
logGMT_reduction=100*((starting_time-time)/(starting_time+intercept/beta))
logGMT_ll_reduction=100*((starting_time-time)/(starting_time+intercept_ll/beta_ul))
logGMT_ul_reduction=100*((starting_time-time)/(starting_time+intercept_ul/beta_ll))
return(c(logGMT_reduction, logGMT_ll_reduction, logGMT_ul_reduction))
}
model_comparison <- function(list, observed_data, suffix){
names <- c(paste0("model_", seq(1,length(list), 1), suffix))
for(i in 1:length(list)){
assign(names[i], list[[i]])
}
###looic
looic=lapply(list, loo)
looic_result=tibble(name=names,
looic_number=sapply(looic, function(i)i[["estimates"]]["looic","Estimate"]),
se_looic=sapply(looic, function(i)i[["estimates"]]["looic","SE"]),
elpd_loo=sapply(looic, function(i)i[["estimates"]]["elpd_loo","Estimate"]))
comparison=loo_compare(looic)
###bayesian_r2
bayesian_r2 <- lapply(list, bayes_R2)
bayesian_r2_result= tibble(name=names,
estimate=sapply(bayesian_r2, function(i)i[,"Estimate"]),
Q2.5=sapply(bayesian_r2, function(i)i[,"Q2.5"]),
Q97.5=sapply(bayesian_r2, function(i)i[,"Q97.5"]))
###rmse
if(suffix=="_pre_nab"|suffix=="_post_nab"){
observed=observed_data$logGMT
}else{observed=observed_data$logRR}
rmse_result=lapply(list, function(i){
value=posterior_epred(i)
value_median=sapply(value, median)
difference=observed-value_median
rmse=sqrt(mean(difference^2))
}) %>% do.call("rbind", .)
final=list(looic_value=looic_result,
looic_comparison=comparison,
r2_value=bayesian_r2_result,
rmse_value=rmse_result)
return(final)
}
effect_comparison_severity_subset <- function(data, category, suffix){
names=c("basic", "variant_only", "time_only", "all")
model_list=if(category=="_pre_nab"){list(
model_base = bf(logGMT ~ Immunity.type+Age.group+Assay+(1|PMID)),
model_no_time = bf(logGMT ~ Immunity.type+Tested.variant+Age.group+Assay+(1|PMID)),
model_no_variant = bf(logGMT ~ Time*Immunity.type+Age.group+Assay+(1|PMID)),
model_all = bf(logGMT ~ Time*Immunity.type+Tested.variant+Age.group+Assay+(1|PMID)))}
else if(category=="_post_nab"){list(
model_base = bf(logGMT ~ Immunity.type+Age.group+Assay+(1|PMID)),
model_no_time = bf(logGMT ~ Immunity.type+Tested.variant+Age.group+Assay+(1|PMID)),
model_no_variant = bf(logGMT ~ Time+Immunity.type+Age.group+Assay+(1|PMID)),
model_all = bf(logGMT ~ Time+Immunity.type+Age.group+Tested.variant+Assay+(1|PMID)))}
else{list(
model_base = bf(logRR ~ Vaccination.type+Exposed_age+(1|PMID)),
model_no_time = bf(logRR ~ Vaccination.type+Variant+Exposed_age+(1|PMID)),
model_no_variant = bf(logRR ~ Time+Vaccination.type+Exposed_age+(1|PMID)),
model_all = bf(logRR ~ Time+Vaccination.type+Variant+Exposed_age+(1|PMID))
)}
model_comparison=if(category %in% suffix[8:9]){lapply(model_list, function(model){
brm(formula=model,
data=data,
prior=c(prior(normal(0,5), class=Intercept)),
warmup = 1000,
iter = 2000,
chains = 4,
seed=225,
save_pars = save_pars(all = TRUE),
family = gaussian(),
control = list(adapt_delta = 0.99,
max_treedepth=12))})
}
else {
lapply(model_list, function(model){
brm(formula=model,
data=data,
prior=c(prior(normal(0,5), class=Intercept)),
warmup = 1000,
iter = 2000,
chains = 4,
seed=225,
save_pars = save_pars(all = TRUE),
family = gaussian(),
control = list(adapt_delta = 0.95,
max_treedepth=12))})
}
###looic
looic=lapply(model_comparison, loo)
looic_result=tibble(name=names,
looic_number=sapply(looic, function(i)i[["estimates"]]["looic","Estimate"]),
se_looic=sapply(looic, function(i)i[["estimates"]]["looic","SE"]),
elpd_loo=sapply(looic, function(i)i[["estimates"]]["elpd_loo","Estimate"]))
###elpd comparison
comparison=loo_compare(looic)
###elpd for time and variant terms only
looic_partial = lapply(model_comparison[c("model_no_time", "model_no_variant")], loo)
looic_partial_result = tibble(name=c("Variant_only", "Time_only"),
looic_number=sapply(looic_partial, function(i)i[["estimates"]]["looic","Estimate"]),
se_looic=sapply(looic_partial, function(i)i[["estimates"]]["looic","SE"]),
elpd_loo=sapply(looic_partial, function(i)i[["estimates"]]["elpd_loo","Estimate"]))
partial_comparison = loo_compare(looic_partial)
###bayesian_r2
bayesian_r2 <- lapply(model_comparison, bayes_R2)
bayesian_r2_result= tibble(name=names,
estimate=sapply(bayesian_r2, function(i)i[,"Estimate"]),
Q2.5=sapply(bayesian_r2, function(i)i[,"Q2.5"]),
Q97.5=sapply(bayesian_r2, function(i)i[,"Q97.5"]))
final=list(looic_value=looic_result,
looic_comparison=comparison,
looic_comparison_partial=partial_comparison,
r2_value=bayesian_r2_result)
return(final)
}
estimated_data <- function(model, estimated_input, type){
set.seed(225)
output=tibble(posterior_epred(model, estimated_input, re_formula = NA))
organized_output=if(type=="nab"){
data.frame(mean_logGMT=apply(output,2,median),
sd_logGMT=apply(output,2,sd)) %>%
mutate(logGMT=mean_logGMT,
logGMT_ll=mean_logGMT-1.96*sd_logGMT,
logGMT_ul=mean_logGMT+1.96*sd_logGMT) %>%
cbind(estimated_input) %>%
mutate_if(names(.) %in% c("Immunity.type","Tested.variant"), factor)
} else{
data.frame(mean_logRR=apply(output,2,median),
sd_logRR=apply(output,2,sd)) %>%
mutate(VE=100*(1-exp(mean_logRR)),
VE_ll=100*(1-exp(mean_logRR+1.96*sd_logRR)),
VE_ul=100*(1-exp(mean_logRR-1.96*sd_logRR))) %>%
cbind(estimated_input) %>%
mutate_if(names(.) %in% c("Vaccination.type","Variant", "Severity"), factor)
}
return(organized_output)
}
# }
#
# RR_fold_change=function(starting_time, time, beta, beta_ll,beta_ul) {
#   RR_fold=exp(beta*(time-starting_time))
#   RR_ll_fold=exp(beta_ll*(time-starting_time))
#   RR_ul_fold=exp(beta_ul*(time-starting_time))
#
#   return(c(RR_fold, RR_ll_fold, RR_ul_fold))
# }
###1. data input-----
setwd("C:/Users/cliud57/SPH Dropbox/CHANG LIU/cliud57@connect.hku.hk的文件/Waning_review/for_uploading/uploaded_data")
pre_nab <- read.csv("pre_nab_all_uploading.csv") %>%
mutate(Immunity.type=factor(Immunity.type, levels=c("2*mRNA", "2*Inactivated", "Primary non-replicating viral vector",
"Heterologous primary series","Mild-infection convalescents")),
Tested.variant=factor(Tested.variant, levels=c("Ancestral", "Alpha", "Beta",
"Gamma", "Delta", "Omicron")),
Age.group=factor(Age.group, levels=c("Adults", "Elderly", "All")),
Assay=factor(Assay, levels=c("MNT", "PRNT", "FRNT")))
post_nab <- read.csv("post_nab_all_uploading.csv") %>%
mutate(Immunity.type=factor(Immunity.type, levels=c("3*mRNA", "3*Inactivated", "Non-replicating viral vector booster",
"Heterologous booster", "2*mRNA convalescents", "2*Inactivated convalescents", "2*Viral vector convalescents")),
Tested.variant=factor(Tested.variant, levels=c("Ancestral", "Alpha", "Beta",
"Gamma", "Delta", "Omicron")),
Age.group=factor(Age.group, levels=c("Adults", "Elderly")),
Assay=factor(Assay, levels=c("MNT","PRNT", "FRNT")))
pre_VE <- read.csv("pre_VE_all_uploading.csv") %>%
mutate(Vaccination.type=factor(Vaccination.type, levels=c("2*mRNA", "Primary series viral vector", "Heterologous primary series")),
Severity=factor(Severity, levels=c("Mild infection", "Severe", "Death")),
Variant=factor(Variant, levels=c("Delta","Omicron", "Alpha", "Beta", "Gamma", "Mixture of variants")),
Exposed_age=factor(Exposed_age, levels=c("Adults", "Elderly", "Children","All"))) %>%
mutate(Severity_simplified=factor(ifelse(Severity=="Mild infection", "Mild infection", "Severe/death"), levels=c("Mild infection", "Severe/death")))
post_VE <- read.csv("post_VE_all_uploading.csv") %>%
mutate(Vaccination.type=factor(Vaccination.type, levels=c("3*mRNA", "Heterologous booster")),
Severity=factor(Severity, levels=c("Mild infection", "Severe")),
Variant=factor(Variant, levels=c("Omicron", "Delta")),
Exposed_age=factor(Exposed_age, levels=c("Adults", "Elderly","All")))
###1. data organization (only remaining BA.1/BA.1.1/BA.2)-----
pre_nab_omicron_subset <- pre_nab
post_nab_omicron_subset <- post_nab %>%
filter(!(PMID=="38396065" & Group.ID %in% c("A2", "A3", "A4", "B2", "B3", "B4", "C2", "C3", "C4", "D2", "D3", "D4")),
!(PMID=="37400857" & Group.ID=="A1"))
pre_VE_omicron_subset <- pre_VE %>%
filter(PMID!="36795625",
!(PMID=="36103455" & Group.ID=="B"))
post_VE_omicron_subset <- post_VE %>%
filter(!(PMID=="37839947" & Group.ID=="D"),
!(PMID=="36103455" & Group.ID=="D"))
pre_VE_omicron_subset_mild <- pre_VE_omicron_subset %>%  filter(Severity_simplified=="Mild infection")
pre_VE_omicron_subset_severe <- pre_VE_omicron_subset %>%  filter(Severity_simplified=="Severe/death")
post_VE_omicron_subset_mild <- post_VE_omicron_subset %>%  filter(Severity=="Mild infection")
post_VE_omicron_subset_severe <- post_VE_omicron_subset %>%  filter(Severity=="Severe")
###2. modelling (with severity subsets)-----
###nab
models_nab <- list(model_1=bf(logGMT ~ Time*Immunity.type*Tested.variant+Age.group+Assay+(1|PMID)),
model_2=bf(logGMT ~ Time*Immunity.type+Tested.variant+Age.group+Assay+(1|PMID)),
model_3=bf(logGMT ~ Time*Tested.variant+Immunity.type+Age.group+Assay+(1|PMID)),
model_4=bf(logGMT ~ Time+Tested.variant+Immunity.type+Age.group+Assay+(1|PMID)),
model_5=bf(logGMT ~ Time:Immunity.type:Tested.variant+Time+Age.group+Assay+(1|PMID)),
model_6=bf(logGMT ~ Time:Immunity.type+Time+Tested.variant+Age.group+Assay+(1|PMID)),
model_7=bf(logGMT ~ Time:Tested.variant+Time+Immunity.type+Age.group+Assay+(1|PMID)))
###VE
models_VE_severity_subset <- list(
model_1VE=bf(logRR ~ Time*Vaccination.type+Variant+Exposed_age+(1|PMID)),
model_2VE=bf(logRR ~ Time*Variant+ Vaccination.type+Exposed_age+(1|PMID)),
model_3VE=bf(logRR ~ Time+Variant+ Vaccination.type+Exposed_age+(1|PMID)),
model_4VE=bf(logRR ~ Time:Vaccination.type+Time+Variant+Exposed_age+(1|PMID)),
model_5VE=bf(logRR ~ Time:Variant+Time+ Vaccination.type+Exposed_age+(1|PMID)),
model_6VE=bf(logRR ~ Time*Variant*Vaccination.type+Exposed_age+(1|PMID)),
model_7VE=bf(logRR ~ Time:Variant:Vaccination.type+Time+Exposed_age+(1|PMID)))
pre_nab_results_list_omicron_subset <- lapply(models_nab,function(model){
brm(formula=model,
data=pre_nab_omicron_subset,
prior=c(prior(normal(0,5),class=b, coef = "Time"),
prior(normal(0,5), class=Intercept)   ###changed instead of (6,3)
#prior(normal(0,5), class=sigma)
),
seed=225,
warmup = 1000,
iter = 2000,
chains = 4,
save_pars = save_pars(all = TRUE),
family = gaussian(),
control = list(adapt_delta = 0.95,
max_treedepth=12))
})  ###1,5 not converged
post_nab_results_list_omicron_subset <- lapply(models_nab,function(model){
brm(formula=model,
data=post_nab_omicron_subset,
prior=c(prior(normal(0,5),class=b, coef = "Time"),
prior(normal(0,5), class=Intercept)   ###changed instead of (6,3)
#prior(normal(0,5), class=sigma)
),
seed=225,
warmup = 1000,
iter = 2000,
chains = 4,
save_pars = save_pars(all = TRUE),
family = gaussian(),
control = list(adapt_delta = 0.95,
max_treedepth=12))
}) ###1,5 not converged
pre_VE_results_list_mild_omicron_subset<- lapply(models_VE_severity_subset,function(model){
brm(formula=model,
data=pre_VE_omicron_subset_mild,
prior=c(prior(normal(0,5),class=b, coef = "Time"),
prior(normal(0,5), class=Intercept)),
seed =225,
warmup = 1000,
iter = 2000,
chains = 4,
save_pars = save_pars(all = TRUE),
family = gaussian(),
control = list(adapt_delta = 0.95,
max_treedepth=12))
})  ###6,7 not converged
pre_VE_results_list_severe_omicron_subset<- lapply(models_VE_severity_subset,function(model){
brm(formula=model,
data=pre_VE_omicron_subset_severe,
prior=c(prior(normal(0,5),class=b, coef = "Time"),
prior(normal(0,5), class=Intercept)),
seed =225,
warmup = 1000,
iter = 2000,
chains = 4,
save_pars = save_pars(all = TRUE),
family = gaussian(),
control = list(adapt_delta = 0.95,
max_treedepth=12))
}) ###6,7 not converged
###general settings-----
library(dplyr)
library(brms)
library(rstan)
library(emmeans)
library(ggpubr)
library(ggplot2)
library(ggforce)
library(purrr)
library(broom)
library(cowplot)
pre_VE_results_list_severe_omicron_subset<- lapply(models_VE_severity_subset,function(model){
brm(formula=model,
data=pre_VE_omicron_subset_severe,
prior=c(prior(normal(0,5),class=b, coef = "Time"),
prior(normal(0,5), class=Intercept)),
seed =225,
warmup = 1000,
iter = 2000,
chains = 4,
save_pars = save_pars(all = TRUE),
family = gaussian(),
control = list(adapt_delta = 0.95,
max_treedepth=12))
}) ###6,7 not converged
install.packages("brms")
install.packages("brms")
pre_VE_results_list_severe_omicron_subset<- lapply(models_VE_severity_subset,function(model){
brm(formula=model,
data=pre_VE_omicron_subset_severe,
prior=c(prior(normal(0,5),class=b, coef = "Time"),
prior(normal(0,5), class=Intercept)),
seed =225,
warmup = 1000,
iter = 2000,
chains = 4,
save_pars = save_pars(all = TRUE),
family = gaussian(),
control = list(adapt_delta = 0.95,
max_treedepth=12))
}) ###6,7 not converged
library(brms)
install.packages("brms")
install.packages("brms")
library(brms)
###FOR MY OWN###
setwd("C:/Users/cliud57/SPH Dropbox/CHANG LIU/Waning_review/nAb_VE/submission/202407_nature_series/codes&data")
library(brms)
remove.packages("brms")
install.packages("brms")
install.packages("brms")
install.packages("brms")
install.packages("brms")
library(brms)
install.packages("brms", lib = "C:/Users/cliud57/AppData/Local/R/win-library/4.2")
install.packages("brms")
install.packages("parallelly")
install.packages("future.apply")
remove.packages("parallelly")
install.packages("parallelly")
Sys.getenv("PATH")
install.packages("parallelly")
